---
title: "Project 2"
author: "Upendra Joshi"
format: html
editor: visual
---



```{r}


# Load required libraries
library(tidyverse)
library(ggplot2)
library(gridExtra)

# Read the data
data <- read.csv("C:\\Users\\upnjo\\OneDrive\\Documents\\Project2\\user_behavior_dataset.csv")

# 1. One-way contingency tables
cat("One-way Contingency Tables:\n")
cat("\nDevice Model Distribution:\n")
print(table(data$Device.Model))
cat("\nOperating System Distribution:\n")
print(table(data$Operating.System))
cat("\nUser Behavior Class Distribution:\n")
print(table(data$User.Behavior.Class))

# 2. Two-way contingency tables
cat("\nTwo-way Contingency Tables:\n")
cat("\nDevice Model by Operating System:\n")
print(table(data$Device.Model, data$Operating.System))
cat("\nUser Behavior Class by Gender:\n")
print(table(data$User.Behavior.Class, data$Gender))

# 3. Numerical summaries by categorical variables
# Function to calculate summary statistics
# First, let's see the actual column names in your data
names(data)

# Modify the function to handle column names with spaces
# Function with correct column names
get_summary_stats <- function(data, group_var, numeric_var) {
  data %>%
    group_by(!!sym(group_var)) %>%
    summarise(
      Mean = mean(!!sym(numeric_var)),
      Median = median(!!sym(numeric_var)),
      SD = sd(!!sym(numeric_var)),
      Min = min(!!sym(numeric_var)),
      Max = max(!!sym(numeric_var))
    )
}

# Print summaries using exact column names from your data
cat("\nApp Usage Time Summary by Device Model:\n")
print(get_summary_stats(data, "Device.Model", "App.Usage.Time..min.day."))

cat("\nBattery Drain Summary by Operating System:\n")
print(get_summary_stats(data, "Operating.System", "Battery.Drain..mAh.day."))

# For other variables
cat("\nScreen Time Summary by Device Model:\n")
print(get_summary_stats(data, "Device.Model", "Screen.On.Time..hours.day."))

cat("\nData Usage Summary by Device Model:\n")
print(get_summary_stats(data, "Device.Model", "Data.Usage..MB.day."))

# 4. Visualizations
# Plot 1: Density plot of App Usage Time by Operating System
p1 <- ggplot(data, aes(x = App.Usage.Time..min.day., fill = Operating.System)) +
  geom_density(alpha = 0.5) +
  labs(title = "App Usage Time Distribution by OS",
       x = "Daily App Usage (minutes)",
       y = "Density") +
  theme_minimal()

# Plot 2: Scatter plot with correlation between Battery Drain and Screen Time
p2 <- ggplot(data, aes(x = Screen.On.Time..hours.day., 
                       y = Battery.Drain..mAh.day., 
                       color = Operating.System)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = FALSE) +
  facet_wrap(~Device.Model) +
  labs(title = "Battery Drain vs Screen Time by Device",
       x = "Screen Time (hours/day)",
       y = "Battery Drain (mAh/day)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45))

# Plot 3: Violin plot of Data Usage by User Behavior Class
p3 <- ggplot(data, aes(x = as.factor(User.Behavior.Class), 
                       y = Data.Usage..MB.day., 
                       fill = Gender)) +
  geom_violin() +
  labs(title = "Data Usage Distribution by User Behavior Class and Gender",
       x = "User Behavior Class",
       y = "Daily Data Usage (MB)") +
  theme_minimal()

# Plot 4: Hexbin plot of App Usage vs Number of Apps
p4 <- ggplot(data, aes(x = Number.of.Apps.Installed, 
                       y = App.Usage.Time..min.day.)) +
  geom_hex(bins = 30) +
  facet_wrap(~Operating.System) +
  scale_fill_viridis_c() +
  labs(title = "App Usage vs Number of Apps Installed",
       x = "Number of Apps Installed",
       y = "Daily App Usage (minutes)") +
  theme_minimal()


# Plot 5: Stacked bar plot of User Behavior Class distribution by Device
p5 <- ggplot(data, aes(x = Device.Model, fill = as.factor(User.Behavior.Class))) +
  geom_bar(position = "fill") +
  labs(title = "User Behavior Class Distribution by Device",
       x = "Device Model",
       y = "Proportion",
       fill = "Behavior Class") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Plot 6: Age distribution by Gender and OS
p6 <- ggplot(data, aes(x = Age, fill = Gender)) +
  geom_histogram(position = "dodge", bins = 30, alpha = 0.7) +
  facet_wrap(~Operating.System) +
  labs(title = "Age Distribution by Gender and Operating System",
       x = "Age",
       y = "Count") +
  theme_minimal()

```


#R Shiny app



```{r}

# Load required libraries
library(shiny)
library(tidyverse)
library(DT)
library(bslib)
library(shinycssloaders)

# UI Definition
ui <- page_sidebar(
    title = "Smartphone User Behavior Analysis",
    theme = bs_theme(version = 5, bootswatch = "flatly"),
    
    # Sidebar panel
    sidebar = sidebar(
        # Categorical variable selectors
        selectInput("device_select", "Select Device Model",
                   choices = c("All", unique(data$Device.Model)),
                   selected = "All"),
        
        selectInput("os_select", "Select Operating System",
                   choices = c("All", unique(data$Operating.System)),
                   selected = "All"),
        
        # First numeric variable selector
        selectInput("num_var1", "Select First Numeric Variable",
                   choices = c(
                       "App Usage Time" = "App.Usage.Time..min.day.",
                       "Screen Time" = "Screen.On.Time..hours.day.",
                       "Battery Drain" = "Battery.Drain..mAh.day.",
                       "Number of Apps" = "Number.of.Apps.Installed",
                       "Data Usage" = "Data.Usage..MB.day.",
                       "Age" = "Age"
                   )),
        
        # Dynamic slider for first numeric variable
        uiOutput("slider1"),
        
        # Second numeric variable selector
        selectInput("num_var2", "Select Second Numeric Variable",
                   choices = c(
                       "App Usage Time" = "App.Usage.Time..min.day.",
                       "Screen Time" = "Screen.On.Time..hours.day.",
                       "Battery Drain" = "Battery.Drain..mAh.day.",
                       "Number of Apps" = "Number.of.Apps.Installed",
                       "Data Usage" = "Data.Usage..MB.day.",
                       "Age" = "Age"
                   )),
        
        # Dynamic slider for second numeric variable
        uiOutput("slider2"),
        
        # Update button
        actionButton("update_data", "Update Analysis",
                    class = "btn-primary"),
        
        hr(),
        
        # Current selection summary
        textOutput("selection_text")
    ),
    
    # Main panel with tabs
    navset_tab(
        # About tab
        nav_panel("About",
                 h2("Smartphone User Behavior Analysis"),
                 tags$img(src = "smartphone.jpg", 
                         height = 200,
                         alt = "Smartphone Usage Illustration"),
                 p("This application analyzes patterns in smartphone usage across different devices and user demographics."),
                 
                 h3("Data Description"),
                 p("The dataset contains information about smartphone usage patterns including:"),
                 tags$ul(
                     tags$li("Device and OS information"),
                     tags$li("Usage metrics (screen time, battery usage, etc.)"),
                     tags$li("User demographics"),
                     tags$li("Behavioral classification")
                 ),
                 
                 h3("How to Use This App"),
                 tags$ul(
                     tags$li("Use the sidebar to filter data based on device type, operating system, and numeric ranges"),
                     tags$li("The 'Data Download' tab allows you to view and download the filtered dataset"),
                     tags$li("The 'Data Exploration' tab provides various visualizations and statistical summaries")
                 )
        ),
        
        # Data Download tab
        nav_panel("Data Download",
                 DT::dataTableOutput("data_table") %>% withSpinner(),
                 br(),
                 downloadButton("download_data", "Download Filtered Data")
        ),
        
        # Data Exploration tab
        nav_panel("Data Exploration",
                 navset_tab(
                     # Summary Statistics tab
                     nav_panel("Summary Statistics",
                              fluidRow(
                                  column(6,
                                         selectInput("summary_var", "Variable to Summarize",
                                                   choices = c(
                                                       "App Usage Time" = "App.Usage.Time..min.day.",
                                                       "Screen Time" = "Screen.On.Time..hours.day.",
                                                       "Battery Drain" = "Battery.Drain..mAh.day.",
                                                       "Number of Apps" = "Number.of.Apps.Installed",
                                                       "Data Usage" = "Data.Usage..MB.day.",
                                                       "Age" = "Age"
                                                   ))
                                  ),
                                  column(6,
                                         selectInput("group_var", "Group By",
                                                   choices = c(
                                                       "Device Model" = "Device.Model",
                                                       "Operating System" = "Operating.System",
                                                       "Gender" = "Gender",
                                                       "User Behavior Class" = "User.Behavior.Class"
                                                   ))
                                  )
                              ),
                              verbatimTextOutput("stat_summary") %>% withSpinner()
                     ),
                     
                     # Categorical Summaries tab
                     nav_panel("Categorical Summaries",
                              selectInput("cat_var", "Select Categorical Variable",
                                        choices = c(
                                            "Device Model" = "Device.Model",
                                            "Operating System" = "Operating.System",
                                            "Gender" = "Gender",
                                            "User Behavior Class" = "User.Behavior.Class"
                                        )),
                              verbatimTextOutput("cat_summary") %>% withSpinner()
                     ),
                     
                     # Visualizations tab
                     nav_panel("Visualizations",
                              fluidRow(
                                  column(4,
                                         selectInput("plot_type", "Select Plot Type",
                                                   choices = c(
                                                       "Density Plot" = "density",
                                                       "Scatter Plot" = "scatter",
                                                       "Violin Plot" = "violin",
                                                       "Box Plot" = "box",
                                                       "Bar Plot" = "bar",
                                                       "Heat Map" = "heat"
                                                   ))
                                  ),
                                  column(4, uiOutput("x_var_ui")),
                                  column(4, uiOutput("y_var_ui"))
                              ),
                              fluidRow(
                                  column(6,
                                         selectInput("color_var", "Color/Fill By",
                                                   choices = c("None",
                                                             "Device Model" = "Device.Model",
                                                             "Operating System" = "Operating.System",
                                                             "Gender" = "Gender",
                                                             "User Behavior Class" = "User.Behavior.Class"))
                                  ),
                                  column(6,
                                         selectInput("facet_var", "Facet By",
                                                   choices = c("None",
                                                             "Device Model" = "Device.Model",
                                                             "Operating System" = "Operating.System",
                                                             "Gender" = "Gender",
                                                             "User Behavior Class" = "User.Behavior.Class"))
                                  )
                              ),
                              plotOutput("plot") %>% withSpinner()
                     )
                 )
        )
    )
)

# Server Definition
server <- function(input, output, session) {
    
    # Variable labels for better display
    var_labels <- c(
        "App.Usage.Time..min.day." = "App Usage Time (min/day)",
        "Screen.On.Time..hours.day." = "Screen Time (hours/day)",
        "Battery.Drain..mAh.day." = "Battery Drain (mAh/day)",
        "Number.of.Apps.Installed" = "Number of Apps",
        "Data.Usage..MB.day." = "Data Usage (MB/day)",
        "Age" = "Age"
    )
    
    # Dynamic UI elements for numeric variable sliders
    output$slider1 <- renderUI({
        req(input$num_var1)
        var_range <- range(data[[input$num_var1]], na.rm = TRUE)
        sliderInput("num_var1_range",
                   paste("Range of", var_labels[input$num_var1]),
                   min = floor(var_range[1]),
                   max = ceiling(var_range[2]),
                   value = var_range)
    })
    
    output$slider2 <- renderUI({
        req(input$num_var2)
        var_range <- range(data[[input$num_var2]], na.rm = TRUE)
        sliderInput("num_var2_range",
                   paste("Range of", var_labels[input$num_var2]),
                   min = floor(var_range[1]),
                   max = ceiling(var_range[2]),
                   value = var_range)
    })
    
    # Reactive filtered dataset
    filtered_data <- eventReactive(input$update_data, {
        req(input$num_var1_range, input$num_var2_range)
        
        data_subset <- data
        
        # Filter categorical variables
        if(input$device_select != "All") {
            data_subset <- data_subset %>% 
                filter(Device.Model == input$device_select)
        }
        if(input$os_select != "All") {
            data_subset <- data_subset %>% 
                filter(Operating.System == input$os_select)
        }
        
        # Filter numeric variables
        data_subset <- data_subset %>%
            filter(
                !!sym(input$num_var1) >= input$num_var1_range[1],
                !!sym(input$num_var1) <= input$num_var1_range[2],
                !!sym(input$num_var2) >= input$num_var2_range[1],
                !!sym(input$num_var2) <= input$num_var2_range[2]
            )
        
        data_subset
    })
    
    # Dynamic selection text
    output$selection_text <- renderText({
        paste("Currently showing", nrow(filtered_data()), "records")
    })
    
    # Data table output
    output$data_table <- DT::renderDataTable({
        filtered_data()
    })
    
    # Download handler
    output$download_data <- downloadHandler(
        filename = function() {
            paste("smartphone_data_", Sys.Date(), ".csv", sep = "")
        },
        content = function(file) {
            write.csv(filtered_data(), file, row.names = FALSE)
        }
    )
    
    # Dynamic UI for plot variables
    output$x_var_ui <- renderUI({
        num_vars <- c(
            "App Usage Time" = "App.Usage.Time..min.day.",
            "Screen Time" = "Screen.On.Time..hours.day.",
            "Battery Drain" = "Battery.Drain..mAh.day.",
            "Number of Apps" = "Number.of.Apps.Installed",
            "Data Usage" = "Data.Usage..MB.day.",
            "Age" = "Age"
        )
        
        cat_vars <- c(
            "Device Model" = "Device.Model",
            "Operating System" = "Operating.System",
            "Gender" = "Gender",
            "User Behavior Class" = "User.Behavior.Class"
        )
        
        choices <- switch(input$plot_type,
                         "density" = num_vars,
                         "scatter" = num_vars,
                         "violin" = cat_vars,
                         "box" = cat_vars,
                         "bar" = cat_vars,
                         "heat" = num_vars)
        
        selectInput("x_var", "X Variable", choices = choices)
    })
    
    output$y_var_ui <- renderUI({
        num_vars <- c(
            "App Usage Time" = "App.Usage.Time..min.day.",
            "Screen Time" = "Screen.On.Time..hours.day.",
            "Battery Drain" = "Battery.Drain..mAh.day.",
            "Number of Apps" = "Number.of.Apps.Installed",
            "Data Usage" = "Data.Usage..MB.day.",
            "Age" = "Age"
        )
        
        if(input$plot_type %in% c("scatter", "violin", "box", "heat")) {
            selectInput("y_var", "Y Variable", choices = num_vars)
        }
    })
    
    # Statistical summary output
    output$stat_summary <- renderPrint({
        req(filtered_data(), input$summary_var, input$group_var)
        
        filtered_data() %>%
            group_by(!!sym(input$group_var)) %>%
            summarise(
                n = n(),
                Mean = mean(!!sym(input$summary_var)),
                SD = sd(!!sym(input$summary_var)),
                Median = median(!!sym(input$summary_var)),
                Min = min(!!sym(input$summary_var)),
                Max = max(!!sym(input$summary_var))
            )
    })
    
    # Categorical summary output
    output$cat_summary <- renderPrint({
        req(filtered_data(), input$cat_var)
        
        table_summary <- table(filtered_data()[[input$cat_var]])
        print(table_summary)
        cat("\nPercentages:\n")
        print(round(prop.table(table_summary) * 100, 2))
    })
    
    # Plot generation
    output$plot <- renderPlot({
        req(filtered_data(), input$plot_type, input$x_var)
        
        df <- filtered_data()
        p <- ggplot(df)
        
        # Add color aesthetic if selected
        if(input$color_var != "None") {
            color_mapping <- aes_string(color = input$color_var, fill = input$color_var)
            p <- p + color_mapping
        }
        
        # Create specific plot based on type
        p <- switch(input$plot_type,
                   "density" = p + 
                       geom_density(aes_string(x = input$x_var), alpha = 0.5),
                   
                   "scatter" = {
                       req(input$y_var)
                       p + 
                           geom_point(aes_string(x = input$x_var, y = input$y_var), 
                                    alpha = 0.6) +
                           geom_smooth(aes_string(x = input$x_var, y = input$y_var), 
                                     method = "lm", se = FALSE)
                   },
                   
                   "violin" = {
                       req(input$y_var)
                       p + 
                           geom_violin(aes_string(x = input$x_var, y = input$y_var), 
                                     alpha = 0.5)
                   },
                   
                   "box" = {
                       req(input$y_var)
                       p + 
                           geom_boxplot(aes_string(x = input$x_var, y = input$y_var))
                   },
                   
                   "bar" = p + 
                       geom_bar(aes_string(x = input$x_var)),
                   
                   "heat" = {
                       req(input$y_var)
                       p + 
                           geom_bin2d(aes_string(x = input$x_var, y = input$y_var)) +
                           scale_fill_viridis_c()
                   }
        )
        
        # Add faceting if selected
        if(input$facet_var != "None") {
            p <- p + facet_wrap(as.formula(paste("~", input$facet_var)))
        }
        
        # Add theme and labels
        p <- p + 
            theme_minimal() +
            theme(
                axis.text.x = element_text(angle = 45, hjust = 1),
                plot.title = element_text(hjust = 0.5),
                legend.position = "bottom"
            ) +
            labs(
                title = paste("Plot of", var_labels[input$x_var]),
                x = var_labels[input$x_var],
                y = if(!is.null(input$y_var)) var_labels[input$y_var] else "Count"
            )
        
        print(p)
    })
}

# Run the app
shinyApp(ui = ui, server = server)
```

